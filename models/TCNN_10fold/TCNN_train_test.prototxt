name: "TCNN"

input: "TCNN_data"
input_dim: 2
input_dim: 3
input_dim: 512
input_dim: 512

input: "TCNN_label"
input_dim: 2
input_dim: 1
input_dim: 10
input_dim: 10

layer {             # Top shape: 10 96 55 55
  name: "TCNN_conv1"
  type: "Convolution"
  bottom: "TCNN_data"
  top: "TCNN_conv1"
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
  }
}
layer {
  name: "TCNN_relu1"
  type: "ReLU"
  bottom: "TCNN_conv1"
  top: "TCNN_conv1"
}
layer {             # Top shape: 10 96 27 27
  name: "TCNN_pool1"
  type: "Pooling"
  bottom: "TCNN_conv1"
  top: "TCNN_pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "TCNN_norm1"
  type: "LRN"
  bottom: "TCNN_pool1"
  top: "TCNN_norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {           
  name: "TCNN_conv2"  # Top shape: 10 256 27 27
  type: "Convolution"
  bottom: "TCNN_norm1"
  top: "TCNN_conv2"
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
  }
}
layer {
  name: "TCNN_relu2"
  type: "ReLU"
  bottom: "TCNN_conv2"
  top: "TCNN_conv2"
}
layer {             # Top shape: 10 256 13 13
  name: "TCNN_pool2"
  type: "Pooling"
  bottom: "TCNN_conv2"
  top: "TCNN_pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "TCNN_norm2"
  type: "LRN"
  bottom: "TCNN_pool2"
  top: "TCNN_norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {             #  Top shape: 10 384 13 13
  name: "TCNN_conv3"
  type: "Convolution"
  bottom: "TCNN_norm2"
  top: "TCNN_conv3"
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
  }
}
layer {
  name: "TCNN_relu3"
  type: "ReLU"
  bottom: "TCNN_conv3"
  top: "TCNN_conv3"
}                         # 3-th conv feature map

#######   adding a average pooling layer (kernel size 13*13, stride ..., ) ########
layer {
  name: "TCNN_energy3"
  type: "Pooling"
  bottom: "TCNN_conv3"
  top: "TCNN_energy3"
  pooling_param {
    pool: AVE
    kernel_size: 13
    stride: 2
  }
}


#layer {
#  name: "TCNN_conv4"
#  type: "Convolution"
#  bottom: "TCNN_conv3"
#  top: "TCNN_conv4"
#  convolution_param {
#    num_output: 384
#    pad: 1
#    kernel_size: 3
#    group: 2
#  }
#}
#layer {
#  name: "TCNN_relu4"
#  type: "ReLU"
#  bottom: "TCNN_conv4"
#  top: "TCNN_conv4"
#}              #  Top shape: 10 384 13 13 


#layer {
#  name: "TCNN_conv5"
#  type: "Convolution"
#  bottom: "TCNN_conv4"
#  top: "TCNN_conv5"
#  convolution_param {
#    num_output: 256
#    pad: 1
#    kernel_size: 3
#    group: 2
#  }
#}
#layer {
#  name: "TCNN_relu5"
#  type: "ReLU"
#  bottom: "TCNN_conv5"
#  top: "TCNN_conv5"
#}
#layer {
#  name: "TCNN_pool5"
#  type: "Pooling"
#  bottom: "TCNN_conv5"
#  top: "TCNN_pool5"
#  pooling_param {
#    pool: MAX
#    kernel_size: 3
#    stride: 2
#  }
#}


#####          1*1 convolution layer          ######
layer {                               
  name: "TCNN_fc6-c"
  type: "Convolution"
  bottom: "TCNN_energy3"
  top: "TCNN_fc6"
  convolution_param {
    num_output: 300
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "TCNN_relu6"
  type: "ReLU"
  bottom: "TCNN_fc6"
  top: "TCNN_fc6"
}
layer {
  name: "TCNN_drop6"
  type: "Dropout"
  bottom: "TCNN_fc6"
  top: "TCNN_fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "TCNN_fc7-c"
  type: "Convolution"
  bottom: "TCNN_fc6"
  top: "TCNN_fc7"
  convolution_param {
    num_output: 250  #should be 250 which is consistent to HapticNet (rather 300)
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "TCNN_relu7"
  type: "ReLU"
  bottom: "TCNN_fc7"
  top: "TCNN_fc7"
}
layer {
  name: "TCNN_drop7"
  type: "Dropout"
  bottom: "TCNN_fc7"
  top: "TCNN_fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "TCNN_fc8-c"
  type: "Convolution"
  bottom: "TCNN_fc7"
  top: "TCNN_fc8"
  convolution_param {
    num_output: 69
    kernel_size: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "TCNN_loss"
  type: "SoftmaxWithLoss"
  bottom: "TCNN_fc8"
  bottom: "TCNN_label"
  top: "TCNN_loss"
  loss_param { 
    #ignore_label: -1
    normalize: false 
  }
  include {
    phase: TRAIN
  }
}
